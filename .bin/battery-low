#!/usr/bin/env bash
# Should rewrite to be pure sh

error () {
    printf "$0: $1\n" >&2
    exit 1
}

while getopts 'sm:snD' opt; do
    case $opt in
        m)
            MESSAGE="${OPTARG}"
            ;;
        n)
            USE_NOTIFY_SEND="y"
            ;;
        s)
            PLAYSOUND="true"
            ;;
        D)
            DEBUG="true";
            ;;
        :)
            error "Option -$OPTARG requires an argument."
            ;;
        \?)
            exit 2
            ;;
    esac
done

get_awk_source() {
    cat <<EOF
BEGIN {
    FS="=";
}
\$1 ~ /ENERGY_FULL$/ {
    f += \$2;
}
\$1 ~ /ENERGY_NOW\$/ {
    n += \$2;
}
\$1 ~ /CHARGE_FULL$/ {
    f += \$2;
}
\$1 ~ /CHARGE_NOW\$/ {
    n += \$2;
}
END {
    print int(100*n/f);
}
EOF
}

is_battery_discharging() {
    grep STATUS=Discharging "${BATTERIES[@]}" && return 0
    return 1
} >/dev/null

get_battery_perc() {
    awk -f <(get_awk_source) "${BATTERIES[@]}"
}

show_nagbar(){
    i3-msg "exec i3-nagbar -m \"${1}\""
}

show_notify(){
    debug "Showing critical message with \"${1}\""
    notify-send -u critical -i ${ICON} "${1}"
}

play_sound(){
    canberra-gtk-play -i battery-low -d "battery-low"
}

show_message(){
    if [[ -n $USE_NOTIFY_SEND ]] && which notify-send > /dev/null; then
        show_notify "$1"
    else
        show_nagbar "$1"
    fi
} >&2

debug(){
    [[ -n $DEBUG ]] && echo "$1"
}

main (){
    # Setting defaults
    MESSAGE="${MESSAGE:-Warning: Battery is getting low}"

    # Array of batteries
    BATTERIES=( /sys/class/power_supply/BAT*/uevent )

    PERC=$(get_battery_perc)
    debug "Battery is currently at ${PERC}%"

    if [ ! -z $DEBUGPERC ]; then
        PERC=${DEBUGPERC}
        debug "DEBUG: simulating battery at $PERC%"
    fi

    if is_battery_discharging; then
        debug "Battery is discharging"
        # We want to warn for the lowest battery state, i.e. not warning 
        # that battery is below 80 when the percentage is 22. Thus we loop
        # over 10..100 with a step of 10.
        for limit in $(seq 10 10 100); do
            if [ $PERC -lt $limit  ]; then
                if [ -e "/tmp/battery-notify-${limit}" ]; then
                    debug "Limit ${limit} has already been notified"
                    continue
                fi
                debug "Battery is less than $limit and has not been notified."
                ICON="battery-level-${limit}-symbolic"
                show_message "${MESSAGE} (${PERC}%)"
                if [ $PERC -lt 25 ] && [ ! -z $PLAYSOUND ]; then
                    debug "Playing battery low sound"
                    play_sound
                fi
                touch "/tmp/battery-notify-${limit}"
                break
            fi
        done
    else
        # Clear notification state
        rm "/tmp/battery-notify-*"
    fi
}

[[ -n $DEBUG ]] && debug "Clearing notification state" \
    && rm "/tmp/battery-notify-"*

main
